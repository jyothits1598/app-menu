import { Pipe } from '@angular/core';
export class NgxGooglePlacesAutocompletePipe {
    transform(predictions) {
        var _a;
        for (const prediction of predictions) {
            prediction.innerHTML = prediction.description;
            for (let i = 0; i < ((_a = prediction.matched_substrings) === null || _a === void 0 ? void 0 : _a.length); i += 1) {
                const offset = prediction.matched_substrings[i].offset + i * 17;
                const length = prediction.matched_substrings[i].length + offset;
                prediction.innerHTML =
                    `${prediction.innerHTML.slice(0, offset)}<strong>${prediction.innerHTML.slice(offset, length)}</strong>${prediction.innerHTML.slice(length)}`;
            }
        }
        return predictions;
    }
}
NgxGooglePlacesAutocompletePipe.decorators = [
    { type: Pipe, args: [{ name: 'highlight' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdvb2dsZS1wbGFjZXMtYXV0b2NvbXBsZXRlLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9uZ3gtZ29vZ2xlLXBsYWNlcy1hdXRvY29tcGxldGUvbGliL25neC1nb29nbGUtcGxhY2VzLWF1dG9jb21wbGV0ZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBS3BELE1BQU0sT0FBTywrQkFBK0I7SUFDbkMsU0FBUyxDQUFDLFdBQXlCOztRQUN4QyxLQUFLLE1BQU0sVUFBVSxJQUFJLFdBQVcsRUFBRTtZQUNwQyxVQUFVLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUM7WUFDOUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxVQUFHLFVBQVUsQ0FBQyxrQkFBa0IsMENBQUUsTUFBTSxDQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDakUsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUNoRSxNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztnQkFDaEUsVUFBVSxDQUFDLFNBQVM7b0JBQ2xCLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxXQUFXLFVBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsWUFBWSxVQUFVLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO2FBQ2pKO1NBQ0Y7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDOzs7WUFiRixJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQcmVkaWN0aW9uIH0gZnJvbSAnLi9uZ3gtZ29vZ2xlLXBsYWNlcy1hdXRvY29tcGxldGUubW9kZWxzJztcblxuQFBpcGUoeyBuYW1lOiAnaGlnaGxpZ2h0JyB9KVxuZXhwb3J0IGNsYXNzIE5neEdvb2dsZVBsYWNlc0F1dG9jb21wbGV0ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgcHVibGljIHRyYW5zZm9ybShwcmVkaWN0aW9uczogUHJlZGljdGlvbltdKTogUHJlZGljdGlvbltdIHtcbiAgICBmb3IgKGNvbnN0IHByZWRpY3Rpb24gb2YgcHJlZGljdGlvbnMpIHtcbiAgICAgIHByZWRpY3Rpb24uaW5uZXJIVE1MID0gcHJlZGljdGlvbi5kZXNjcmlwdGlvbjtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJlZGljdGlvbi5tYXRjaGVkX3N1YnN0cmluZ3M/Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHByZWRpY3Rpb24ubWF0Y2hlZF9zdWJzdHJpbmdzW2ldLm9mZnNldCArIGkgKiAxNztcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gcHJlZGljdGlvbi5tYXRjaGVkX3N1YnN0cmluZ3NbaV0ubGVuZ3RoICsgb2Zmc2V0O1xuICAgICAgICBwcmVkaWN0aW9uLmlubmVySFRNTCA9XG4gICAgICAgICAgYCR7cHJlZGljdGlvbi5pbm5lckhUTUwuc2xpY2UoMCwgb2Zmc2V0KX08c3Ryb25nPiR7cHJlZGljdGlvbi5pbm5lckhUTUwuc2xpY2Uob2Zmc2V0LCBsZW5ndGgpfTwvc3Ryb25nPiR7cHJlZGljdGlvbi5pbm5lckhUTUwuc2xpY2UobGVuZ3RoKX1gO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJlZGljdGlvbnM7XG4gIH1cbn0iXX0=