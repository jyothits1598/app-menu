import { ChangeDetectorRef, ElementRef, EventEmitter, Injector } from '@angular/core';
import { NgxGooglePlacesAutocompleteConfig } from './ngx-google-places-autocomplete.config';
import { NgxGooglePlacesAutocompleteControlValueAccessor } from './ngx-google-places-autocomplete.control-value-accessor';
import { Prediction } from './ngx-google-places-autocomplete.models';
import * as ɵngcc0 from '@angular/core';
export declare class NgxGooglePlacesAutocompleteComponent extends NgxGooglePlacesAutocompleteControlValueAccessor {
    private changeDetectorRef;
    private elementRef;
    private ngxGooglePlacesAutocompleteConfig;
    private service;
    index: number;
    predictions: Prediction[];
    show: boolean;
    placeholder: string;
    scriptLoaded: EventEmitter<boolean>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef, injector: Injector, ngxGooglePlacesAutocompleteConfig: NgxGooglePlacesAutocompleteConfig);
    onBlur(): void;
    onClick(): void;
    onFocus(): void;
    onKeyDown(event: KeyboardEvent): void;
    onModelChange(input: string): void;
    onMouseDown(prediction: Prediction, event?: MouseEvent): void;
    private dispatchEvent;
    private initialize;
    private reset;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxGooglePlacesAutocompleteComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxGooglePlacesAutocompleteComponent, "ngx-google-places-autocomplete", never, { "placeholder": "placeholder"; }, { "scriptLoaded": "scriptLoaded"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdvb2dsZS1wbGFjZXMtYXV0b2NvbXBsZXRlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZ3gtZ29vZ2xlLXBsYWNlcy1hdXRvY29tcGxldGUuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmd4R29vZ2xlUGxhY2VzQXV0b2NvbXBsZXRlQ29uZmlnIH0gZnJvbSAnLi9uZ3gtZ29vZ2xlLXBsYWNlcy1hdXRvY29tcGxldGUuY29uZmlnJztcbmltcG9ydCB7IE5neEdvb2dsZVBsYWNlc0F1dG9jb21wbGV0ZUNvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnLi9uZ3gtZ29vZ2xlLXBsYWNlcy1hdXRvY29tcGxldGUuY29udHJvbC12YWx1ZS1hY2Nlc3Nvcic7XG5pbXBvcnQgeyBQcmVkaWN0aW9uIH0gZnJvbSAnLi9uZ3gtZ29vZ2xlLXBsYWNlcy1hdXRvY29tcGxldGUubW9kZWxzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neEdvb2dsZVBsYWNlc0F1dG9jb21wbGV0ZUNvbXBvbmVudCBleHRlbmRzIE5neEdvb2dsZVBsYWNlc0F1dG9jb21wbGV0ZUNvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmO1xuICAgIHByaXZhdGUgZWxlbWVudFJlZjtcbiAgICBwcml2YXRlIG5neEdvb2dsZVBsYWNlc0F1dG9jb21wbGV0ZUNvbmZpZztcbiAgICBwcml2YXRlIHNlcnZpY2U7XG4gICAgaW5kZXg6IG51bWJlcjtcbiAgICBwcmVkaWN0aW9uczogUHJlZGljdGlvbltdO1xuICAgIHNob3c6IGJvb2xlYW47XG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICBzY3JpcHRMb2FkZWQ6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICBjb25zdHJ1Y3RvcihjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGluamVjdG9yOiBJbmplY3Rvciwgbmd4R29vZ2xlUGxhY2VzQXV0b2NvbXBsZXRlQ29uZmlnOiBOZ3hHb29nbGVQbGFjZXNBdXRvY29tcGxldGVDb25maWcpO1xuICAgIG9uQmx1cigpOiB2b2lkO1xuICAgIG9uQ2xpY2soKTogdm9pZDtcbiAgICBvbkZvY3VzKCk6IHZvaWQ7XG4gICAgb25LZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBvbk1vZGVsQ2hhbmdlKGlucHV0OiBzdHJpbmcpOiB2b2lkO1xuICAgIG9uTW91c2VEb3duKHByZWRpY3Rpb246IFByZWRpY3Rpb24sIGV2ZW50PzogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBkaXNwYXRjaEV2ZW50O1xuICAgIHByaXZhdGUgaW5pdGlhbGl6ZTtcbiAgICBwcml2YXRlIHJlc2V0O1xufVxuIl19